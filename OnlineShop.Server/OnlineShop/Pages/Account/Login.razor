@page "/login"

@inject IUserGrpcService UserGrpcService;
@inject NavigationManager NavManager
@inject LoginState LoginState

@if (showModal)
{
    <LoadingModal></LoadingModal>
}

<div class="container">

    <div class="row py-5">
        <div class="col-3"></div>
        <div class="col-5">
            @if (!isSignUp)
            {
                <div class="card">
                    <h4 class="card-header bg-light">Login</h4>

                    <div class="card-body">
                        <EditForm Model="@loginRequest" OnValidSubmit="SignIn">
                            @if (enableLoginValidation)
                            {
                                <DataAnnotationsValidator />
                            }

                            @if (!context.Validate())
                            {
                                <ValidationSummary />
                            }

                            @if (!string.IsNullOrEmpty(loginMessage) && context.Validate())
                            {
                                <div class="alert alert-danger">
                                    @loginMessage
                                </div>
                            }
                            <div class="form-group">
                                <label for="email">Email Address:</label>
                                <InputText id="email" name="email" @bind-Value="loginRequest.Email" class="form-control" placeholder="Email Address" @oninput="EnableLoginValidation" />
                            </div>
                            <div class="form-group">
                                <label for="password">Password:</label>
                                <InputText type="password" id="password" name="password" @bind-Value="loginRequest.Password" class="form-control" placeholder="Password" @oninput="EnableLoginValidation" />
                                <div class="mt-2">
                                    <a class="card-link" href="" @onclick="SwitchToSignup" @onclick:preventDefault>Dont' have account? Sign Up!</a><br />
                                    <a class="card-link" href="">Forget Password</a>
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary" disabled="@(!context.Validate() || !context.IsModified())">Login</button>
                        </EditForm>
                    </div>

                </div>
            }
            else
            {
                <div class="card">
                    <h4 class="card-header bg-light">Sign Up</h4>

                    <div class="card-body">
                        <EditForm Model="@signupRequest" OnValidSubmit="SignUp">
                            @if (enableSignupValidation)
                            {
                                <DataAnnotationsValidator />
                            }

                            @if (!context.Validate())
                            {
                                <div class="alert alert-danger">
                                    <ValidationSummary />
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(signupMessage) && context.Validate())
                            {
                                @if (signUpSuccess)
                                {
                                    <div class="alert alert-success">
                                        <p>@signupMessage</p>
                                        <p>Click <a href="" @onclick="SwitchToLogin" @onclick:preventDefault>here</a> to return to login page.</p>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-danger">
                                        @signupMessage
                                    </div>
                                }
                            }

                            <div class="form-group">
                                <label for="name">Name:</label>
                                <InputText id="name" name="name" @bind-Value="signupRequest.Name" class="form-control" placeholder="Name" @oninput="EnableSignupValidation" />
                            </div>
                            <div class="form-group">
                                <label for="email">Email Address:</label>
                                <InputText id="email" name="email" @bind-Value="signupRequest.Email" class="form-control" placeholder="Email Address" @oninput="EnableSignupValidation" />
                            </div>
                            <div class="form-group">
                                <label for="password">Password:</label>
                                <InputText type="password" id="password" name="password" @bind-Value="signupRequest.Password" class="form-control" placeholder="Password" @oninput="EnableSignupValidation" />
                            </div>
                            <div class="form-group">
                                <label for="confirmPassword">Confirm Password:</label>
                                <InputText type="password" id="confirmPassword" name="confirmPassword" @bind-Value="signupRequest.ConfirmPassword" class="form-control" placeholder="Confirm Password" @oninput="EnableSignupValidation" />
                            </div>
                            <button type="submit" class="btn btn-primary" disabled="@(!context.Validate()|| !context.IsModified())">Sign Up</button>
                            <button type="button" class="btn btn-danger" @onclick="SwitchToLogin">Cancel</button>
                        </EditForm>
                    </div>
                </div>
            }


        </div>
        <div class="col-4"></div>
    </div>
</div>


@code {
    private LoginRequest loginRequest = new LoginRequest();
    private SignupRequest signupRequest = new SignupRequest();

    private bool isSignUp = false;
    private bool signUpSuccess = false;
    private string signupMessage = null;
    private bool enableSignupValidation = false;

    private string loginMessage = null;
    private bool enableLoginValidation = false;

    private bool showModal = false;


    private void SwitchToSignup()
    {
        isSignUp = true;
        loginMessage = null;
        enableLoginValidation = false;

        loginRequest = new LoginRequest();
    }

    private void SwitchToLogin()
    {
        isSignUp = false;
        signupMessage = null;
        signUpSuccess = false;
        enableSignupValidation = false;

        signupRequest = new SignupRequest();
    }

    private void OpenModal()
    {
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void EnableSignupValidation()
    {
        signupMessage = null;
        signUpSuccess = false;
        enableSignupValidation = true;
    }

    private void EnableLoginValidation()
    {
        loginMessage = null;
        enableLoginValidation = true;
    }

    private async Task SignIn()
    {
        OpenModal();

        loginMessage = null;

        try
        {
            await UserGrpcService.Login(loginRequest);
        }
        catch (RpcException ex)
        {
            loginMessage = ex.Status.Detail;
            CloseModal();
            return;
        }

        enableLoginValidation = false;
        CloseModal();

        LoginState.LoggedIn = true;

        NavManager.NavigateTo("/search");
    }

    private async Task SignUp()
    {

        OpenModal();

        signupMessage = null;
        signUpSuccess = false;

        if (signupRequest.Password != signupRequest.ConfirmPassword)
        {
            signUpSuccess = false;
            signupMessage = "Passwords do not match";
            CloseModal();

            return;
        }

        try
        {
            await UserGrpcService.CreateUser(signupRequest);
        }
        catch (RpcException rpcEx)
        {
            signUpSuccess = false;
            signupMessage = rpcEx.Status.Detail;

            CloseModal();
            return;
        }

        CloseModal();

        signupMessage = "Successfully created account.";
        signUpSuccess = true;

        enableSignupValidation = false;
        signupRequest = new SignupRequest();
    }
}
